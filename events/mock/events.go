// Code generated by MockGen. DO NOT EDIT.
// Source: events.go

// Package mock_events is a generated GoMock package.
package mock_events

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	events "go.hollow.sh/toolbox/events"
)

// MockStreamParameters is a mock of StreamParameters interface.
type MockStreamParameters struct {
	ctrl     *gomock.Controller
	recorder *MockStreamParametersMockRecorder
}

// MockStreamParametersMockRecorder is the mock recorder for MockStreamParameters.
type MockStreamParametersMockRecorder struct {
	mock *MockStreamParameters
}

// NewMockStreamParameters creates a new mock instance.
func NewMockStreamParameters(ctrl *gomock.Controller) *MockStreamParameters {
	mock := &MockStreamParameters{ctrl: ctrl}
	mock.recorder = &MockStreamParametersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStreamParameters) EXPECT() *MockStreamParametersMockRecorder {
	return m.recorder
}

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockStream) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockStreamMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStream)(nil).Close))
}

// Open mocks base method.
func (m *MockStream) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockStreamMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockStream)(nil).Open))
}

// Publish mocks base method.
func (m *MockStream) Publish(ctx context.Context, subject string, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, subject, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockStreamMockRecorder) Publish(ctx, subject, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockStream)(nil).Publish), ctx, subject, msg)
}

// PullMsg mocks base method.
func (m *MockStream) PullMsg(ctx context.Context, batch int) ([]events.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullMsg", ctx, batch)
	ret0, _ := ret[0].([]events.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PullMsg indicates an expected call of PullMsg.
func (mr *MockStreamMockRecorder) PullMsg(ctx, batch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullMsg", reflect.TypeOf((*MockStream)(nil).PullMsg), ctx, batch)
}

// Subscribe mocks base method.
func (m *MockStream) Subscribe(ctx context.Context) (events.MsgCh, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", ctx)
	ret0, _ := ret[0].(events.MsgCh)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockStreamMockRecorder) Subscribe(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockStream)(nil).Subscribe), ctx)
}

// MockMessage is a mock of Message interface.
type MockMessage struct {
	ctrl     *gomock.Controller
	recorder *MockMessageMockRecorder
}

// MockMessageMockRecorder is the mock recorder for MockMessage.
type MockMessageMockRecorder struct {
	mock *MockMessage
}

// NewMockMessage creates a new mock instance.
func NewMockMessage(ctrl *gomock.Controller) *MockMessage {
	mock := &MockMessage{ctrl: ctrl}
	mock.recorder = &MockMessageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessage) EXPECT() *MockMessageMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockMessage) Ack() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ack")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ack indicates an expected call of Ack.
func (mr *MockMessageMockRecorder) Ack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockMessage)(nil).Ack))
}

// Data mocks base method.
func (m *MockMessage) Data() []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockMessageMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockMessage)(nil).Data))
}

// InProgress mocks base method.
func (m *MockMessage) InProgress() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InProgress")
	ret0, _ := ret[0].(error)
	return ret0
}

// InProgress indicates an expected call of InProgress.
func (mr *MockMessageMockRecorder) InProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InProgress", reflect.TypeOf((*MockMessage)(nil).InProgress))
}

// Nak mocks base method.
func (m *MockMessage) Nak() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Nak")
	ret0, _ := ret[0].(error)
	return ret0
}

// Nak indicates an expected call of Nak.
func (mr *MockMessageMockRecorder) Nak() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Nak", reflect.TypeOf((*MockMessage)(nil).Nak))
}

// Subject mocks base method.
func (m *MockMessage) Subject() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subject")
	ret0, _ := ret[0].(string)
	return ret0
}

// Subject indicates an expected call of Subject.
func (mr *MockMessageMockRecorder) Subject() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subject", reflect.TypeOf((*MockMessage)(nil).Subject))
}

// Term mocks base method.
func (m *MockMessage) Term() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Term")
	ret0, _ := ret[0].(error)
	return ret0
}

// Term indicates an expected call of Term.
func (mr *MockMessageMockRecorder) Term() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Term", reflect.TypeOf((*MockMessage)(nil).Term))
}
